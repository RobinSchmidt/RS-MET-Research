We want to accelerate the convergence of the Taylor series for the natrural logarithm, which is 
given by:

Define: z := x-1   (we want to expand around 1)

         z^1   z^2   z^3   z^4   z^5   z^6
log(x) = --- - --- + --- - --- + --- - --- + ...
          1     2     3     4     5     6

This is an alternating series with a rather slow convergence. For z = 1 (i.e. x = 2), this becomes
the alterning version of the harmonic series. This video:
  https://www.youtube.com/watch?v=wqMQRwX4Zn0
describes a method fo accelerating a similar series


See at 11 minutes:

z^1 / 1

z^2 / 2

z^3 / 3

z^4 / 4

z^5 / 5

  :2             :4

  
z^2   z^1   2*z^2 - 1*z^1
--- - --- = ------------- = b0
 1     2         1*2
 
z^3   z^2   2*z^3 - 3*z^2
--- - --- = ------------- = b1
 3     2         2*3
 
z^4   z^3   3*z^3 - 4*z^2
--- - --- = ------------- = b2
 4     3         3*4


 
 
      
      
...hmm - that gets out of hand quickly - let's try it withozut the z, first, i.e. taking fixed value of z=1:

1/1
     (1-2)/(1*2)
1/2               ((1*2)*(2-3) - (2*3)*(1-2)) / (1*2*2*3)
     (2-3)/(2*3)
1/3               ((2*3)*(3-4) - (3*4)*(2-3)) / (2*3*3*4)
     (3-4)/(3*4)
1/4               ((3*4)*(4-5) - (4*5)*(3-4)) / (3*4*4*5)
     (4-5)/(4*5)
1/5

 :2       :4

 
 
The general pattern is:

a0
    a1-a0
a1         (a2-a1)-(a1-a0)
    a2-a1                   ((a3-a2)-(a2-a1))-((a2-a1)-(a1-a0))
a2         (a3-a2)-(a2-a1)
    a3-a2
a3 

:2    :4          :8                         :16








https://www.johndcook.com/blog/2020/08/06/cohen-acceleration/
https://people.mpim-bonn.mpg.de/zagier/files/exp-math-9/fulltext.pdf
https://www.johndcook.com/blog/2019/08/01/accelerating-an-alternating-series/
https://www.johndcook.com/blog/2019/08/02/aitken-acceleration/

this seems very useful:
https://dlmf.nist.gov/3.9
https://dlmf.nist.gov/3.9#ii

http://numbers.computation.free.fr/Constants/Miscellaneous/seriesacceleration.html

https://mathworld.wolfram.com/EulersSeriesTransformation.html

https://en.wikipedia.org/wiki/Binomial_transform#Euler_transform

algorithm with fixed upper limit:
precompute compute a0...aN, store in array a
set scale = 0.5, sum = 0, sign = 1
for(n = 0; n <= N; n++) {
  sum += scale * sign * a[0];
  forwardDiff(a, N+1);  }       // upper limit may be N+1-n?
 
could it be done without precomputing and storing the array a? 

  






