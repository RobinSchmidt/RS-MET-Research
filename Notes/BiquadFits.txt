Here:

http://www.rs-met.com/documents/dsp/DigitalBiquadDesignByMagnitudeRequirements.pdf

I derived an algorithm for fitting a biquad magnitude response. At one point, it involves a root
finding problem which I suggest there to solve via Newton iteration. However, the equation can 
actually be solved analytically - for example by sage:

var("x a b c d e")
eq = x + a/(x+b+c/x) + d/x + e == 0
s = solve(eq, x)
s
#s1 = s[0]
#s1.simplify_full()
#s1

The result is quite messy and the commented "simplify..." stuff doesn't give anything (why?), so 
let's try to simplify it manually. Sage gives the following result:

...oh - damn! it's even too long to copy by hand...

...but wait: defining a := -B0, b := B1^2, c = B2, we can write this as:

                 b           c^2             c^2       b*x
0 = a + x + ------------- + ----- = a + x + ----- + ---------
             x+2*c+c^2/x      x               x      (x+c)^2

Bringing all terms over the common denominator x*(x+c)^2 and then multiplying the whole equation by
that denominator yields the following quartic equation to solve:

0 = (c^2 + a*x + x^2) * (x + c)^2 + b*x^2

This is something, sage can handle more reasonably:

var("x a b c") 
eq = 0 == (c^2+a*x+x^2)*(x+c)^2 + b*x^2
s = solve(eq, x)

which gives:

x == -1/4*a - 1/2*c - 1/2*sqrt(1/2*(a + 2*c)^2 - 2*a*c - 4*c^2 - b + 1/2*((a + 2*c)^3 + 8*a*c^2 + 16*c^3 - 4*(2*a*c + 2*c^2 + b)*(a + 2*c))/sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)) - 1/4*sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)
x == -1/4*a - 1/2*c + 1/2*sqrt(1/2*(a + 2*c)^2 - 2*a*c - 4*c^2 - b + 1/2*((a + 2*c)^3 + 8*a*c^2 + 16*c^3 - 4*(2*a*c + 2*c^2 + b)*(a + 2*c))/sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)) - 1/4*sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)
x == -1/4*a - 1/2*c - 1/2*sqrt(1/2*(a + 2*c)^2 - 2*a*c - 4*c^2 - b - 1/2*((a + 2*c)^3 + 8*a*c^2 + 16*c^3 - 4*(2*a*c + 2*c^2 + b)*(a + 2*c))/sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)) + 1/4*sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)
x == -1/4*a - 1/2*c + 1/2*sqrt(1/2*(a + 2*c)^2 - 2*a*c - 4*c^2 - b - 1/2*((a + 2*c)^3 + 8*a*c^2 + 16*c^3 - 4*(2*a*c + 2*c^2 + b)*(a + 2*c))/sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)) + 1/4*sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)

Lets define:
A := -1/4*a - 1/2*c
B := sqrt(a^2 - 4*a*c + 4*c^2 - 4*b)
C := 1/2*((a + 2*c)^3 + 8*a*c^2 + 16*c^3 - 4*(2*a*c + 2*c^2 + b)*(a + 2*c))
D := 1/2*(a + 2*c)^2 - 2*a*c - 4*c^2 - b

With these, the mess above can be simplified to:
x == A - 1/4*B - 1/2*sqrt(D + C/B)
x == A - 1/4*B + 1/2*sqrt(D + C/B)
x == A + 1/4*B - 1/2*sqrt(D - C/B)
x == A + 1/4*B + 1/2*sqrt(D - C/B)
...that was done manually, so there may be mistakes. ToDo: verify numerically and/or plug it back 
into the equation: 0 == (c^2+a*x+x^2)*(x+c)^2 + b*x^2

the C,B variables have k := (a + 2*c) as common subexpression:

C := 1/2*(k^3 + 8*a*c^2 + 16*c^3 - 4*(2*a*c + 2*c^2 + b)*k)
D := 1/2*k^2 - 2*a*c - 4*c^2 - b


Let's see what wolfram alpha has to say about this:

https://www.wolframalpha.com/input/?i=solve+%28c%5E2%2Ba*x%2Bx%5E2%29*%28x%2Bc%29%5E2+%2B+b*x%5E2+%3D+0

will initially produce a numeric result. Clicking on "Exact forms" then gives:

x = 1/4 (-sqrt(a^2 - 4 a c - 4 b + 4 c^2) - sqrt( 2)  sqrt(a sqrt(a^2 - 4 a c - 4 b + 4 c^2) + 2 c sqrt(a^2 - 4 a c - 4 b + 4 c^2) + a^2 - 2 b - 4 c^2) - a - 2 c)
x = 1/4 (-sqrt(a^2 - 4 a c - 4 b + 4 c^2) + sqrt( 2)  sqrt(a sqrt(a^2 - 4 a c - 4 b + 4 c^2) + 2 c sqrt(a^2 - 4 a c - 4 b + 4 c^2) + a^2 - 2 b - 4 c^2) - a - 2 c)
x = 1/4 ( sqrt(a^2 - 4 a c - 4 b + 4 c^2) - sqrt(-2 a sqrt(a^2 - 4 a c - 4 b + 4 c^2) - 4 (c (sqrt(a^2 - 4 a c - 4 b + 4 c^2) + 2 c) + b) + 2 a^2) - a - 2 c)
x = 1/4 ( sqrt(a^2 - 4 a c - 4 b + 4 c^2) + sqrt(-2 a sqrt(a^2 - 4 a c - 4 b + 4 c^2) - 4 (c (sqrt(a^2 - 4 a c - 4 b + 4 c^2) + 2 c) + b) + 2 a^2) - a - 2 c)

ToDo: simplify the wolfram results manually, too

B := sqrt(a^2 - 4 a c - 4 b + 4 c^2)    ...same as above

x = 1/4 (-B - a - 2 c - sqrt( 2)  sqrt(a B + 2 c B + a^2 - 2 b - 4 c^2))
x = 1/4 (-B - a - 2 c + sqrt( 2)  sqrt(a B + 2 c B + a^2 - 2 b - 4 c^2))
x = 1/4 ( B - a - 2 c - sqrt(-2 a B - 4 (c B + 2 c) + b) + 2 a^2))
x = 1/4 ( B - a - 2 c + sqrt(-2 a B - 4 (c B + 2 c) + b) + 2 a^2))

x = 1/4 (-B - (a + 2 c) - sqrt( 2)  sqrt(a B + 2 c B + a^2 - 2 b - 4 c^2))
x = 1/4 (-B - (a + 2 c) + sqrt( 2)  sqrt(a B + 2 c B + a^2 - 2 b - 4 c^2))
x = 1/4 ( B - (a + 2 c) - sqrt(-2 a B - 4 (c B + 2 c) + b) + 2 a^2))
x = 1/4 ( B - (a + 2 c) + sqrt(-2 a B - 4 (c B + 2 c) + b) + 2 a^2))

k := (a + 2 c)
A := sqrt( 2)  sqrt(a B + 2 c B + a^2 - 2 b - 4 c^2)
C: = sqrt(-2 a B - 4 (c B + 2 c) + b)

x = 1/4 (-B - k - A)
x = 1/4 (-B - k + A)
x = 1/4 ( B - k - C + 2 a^2))    ? parentheses don't match! -> verify!
x = 1/4 ( B - k + C + 2 a^2))



We'll see, whether or not the analytic results will be preferable over using Newton iteration

also: 
What, if the matrix becomes singular? Maybe, in the case of an inconsistent system (i.e. no 
solutions exist), we should compute a least squares approximation? And in the case of multiple 
solutions, use a minimum norm solution? The 2nd case should definitely exist: just think about a 
flat magnitude response and all the different allpass filters that would have such a response. But 
maybe, our post-processing (reflecting the poles and zeros, etc.) then makes the solution unique? 
But maybe the post-processing only selects between the 4 solutions of the quartic equation? ...and 
maybe we can avoid the post-processing altogether by finding some rules, which of the 4 solutions 
to pick?


