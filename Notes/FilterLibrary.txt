Proposal for a C++ library for the design and application of classic scientific IIR filters.

Features:

- Implementation goals and considerations:

  - Should be templatized and at least support float, double, SIMD-vectors and maybe multiprecision
    for the signals and coefficients. The type of the parameters/coeffs and signals should possibly 
    be different (examples: (1) scalar coeffs and multichannel signals realized by simd, (2) 
    matrices for coeffs and vectors for signals for MIMO filters). SIMD coeffs can also be useful 
    (each channel can have different coeffs) but that may be difficult to achieve when std::complex 
    is used for the poles and zeros. We need a more flexible complex datatype that can work with 
    SIMD and multiprecision numbers. Check if std::complex can do that now and if not, look into
    boost::math .
    
  - Should be realtime capable: sample and block based processing functions shall never allocate 
    memory. Filter parameter updates (e.g. change of cutoff freq) should also work without 
    allocations. They also shall not acquire locks. Any thread-sync should be done on a higher level
    anyway and is not within the scope of the responsibility of this library. This library should 
    only care about crunching numbers. Maybe that could be demonstrated by a plugin and/or a filter
    for a popular open-source synthesizer like Surge and/or VCV Rack.

  - Should be implemented as C++20 "module".
  
  - May define two C++20 "concepts": "Signal" and "Parameter" or "Coefficient". They must be numeric 
    and it must be possible to arithmetically combine coeffs and signals and the result of that 
    should be a signal. Example: coeff = float, signal = simd<float, 4>.
    
  - Maybe a library for dealing with polynomials and rational functions should be factored out. Such
    a library may be useful in its own right. There is already boost::polynomial. Look into that and
    see, if it's suitable. Hmm...problematic: has only a value_type used for values *and* coeffs.
    I'd like to see separate types for value_type and coeff_type. Maybe that class could be extended
    appropriately. There isn't very much functionality going on in that class anyway. I need much 
    more - including root-finding aka factorization. But actually, for the filter library, I think, 
    we could get away with one type for value *and* coeff.
    
  - The usual design pipeline for a digital filter is:  user-specification  ->  s-plane prototype 
    zeros/poles/gain  ->  s-plane freq trafo  ->  s-to-z trafo  ->  coeff calculation for 
    implementation structure (e.g. biquad chain, SVF-chain, etc.)
    
  - Its should be flexible, i.e. the user can choose, which sort of s-to-z trafo shall be used 
    (bilinear, impulse-invariant, MZTi, etc.)
    
  - When the user just changes a cutoff frequency on a filter plugin (think: in a DAW or 
    synthesizer), the prototype poles/zeros do not need to be recomputed. The prototype pole/zero 
    calculation is by far the most computationally expensive part so it should only be done when 
    really needed. A cutoff change only affects the "s-plane freq trafo" step (and everything 
    thereafter), so cached prototype zeros and poles shall be re-used in a realtime plugin context.
    

- Prototype Designs:

  - Butterworth, Chebychev 1/2 and Elliptic lowpass and low-shelving prototype poles and zeros are 
    computed via closed form formulas for the s-plane poles and zeros. The formulas for that can be 
    found in the Orfanidis papers and also in my existing codebase.
    
  - Bessel, Papoulis, Halpern and Gaussian prototypes are designed via formulas for polynomial 
    coeffs and a subsequent polynomial root-finder. I already have code for all of these which could 
    be adapted. Maybe some other designs could be added. This book: 
    https://link.springer.com/book/10.1007/b100752 (which I have on my bookshelf) has some more 
    designs (Legendre, ultraspherical, transitional). Maybe these can be added as well. Maybe there 
    are even more types out there which could be added. I've once seen a paper talking about 
    "parabolic" filters, for example.


- Frequency transformations:

  - They work on the poles and zeros (and gain), i.e. on the zpk-representation.
  
  - s-plane to s-plane LP/LP, LP/HP, LP/BP, LP/BR, LP/LS (LS = low-shelv)
  
  - z-plane to z-plane LP/LP, ... (Constantinides formulas)
  
  - bilinear s-to-z and z-to-s transform
  
  - s-to-z via MZTi, Nyquist frequency match
  
  - Maybe some of these transformation could also be applied to other representations directly such 
    as to biquad-chain coeffs. Not sure yet - we'll see.


- Different implementation structures and conversion routines for the coeffs of the different 
  structures:
  
  - ZPK-form (zeros, poles, gain) - that's the form in which prototypes are designed.
  
  - Biquad cascade (called second order sections (SOS) in Matlab)
  
  - Lattice form 
  
  - Parallel biquads (good for parallelization and bidirectional application)
  
  - Direct form (not recommened to use but for the sake of completeness)
  
  - Biquads can be implemented in SVF (state variable) form and state-vector form and in all 4 
    direct forms.
  
  
- Implementations should be applicable to:

  - Realtime processing as in audio plugin, i.e. sample-by-sample processing should be possible.
  
  - Batch-processing on multi-dimensional arrays by using strides, i.e. we filter along a particular 
    dimension. Should ideally be compatible with std::mdspan - at least for strided layouts. 
    
  - We should be able to apply them bidirectionally using the exact formulas for the states after
    (ringout/warm-up)
 
 
- More feature ideas: 

  - Maybe compensation allpass designs
  
  - Maybe transitional filters can be provided, too
  
  - Maybe iterative design of arbitrary filters based on iterative optimization - but: maybe that 
    should be based on some library dedicated to iterative optimization. Maybe it should be and
    optional feature and if that feature is not needed, the rest of the library will work without
    having the optimization library installed.  
    
  - Maybe biquad designs based on magnitude samples 
  
  - Crossover designs with perfect reconstruction  
  
  - Filtering for non-uniformly sampled data. I have some code for that already here:
    https://github.com/RobinSchmidt/RS-MET/discussions/327
    It requires to decompose the filter into a parallel structure
  
  
- The design shall be inspired by:

  - https://github.com/vinniefalco/DSPFilters
  
  - https://github.com/RobinSchmidt/RS-MET/blob/master/Libraries/RobsJuceModules/rapt/Filters/Scientific/EngineersFilter.h
    This code behind EngineersFilter already implements most of the required mathematics and can 
    serve as a basis. My EngineersFilter plugin is based on this implementation

  
- Challenges:

  - The biggest challenge is perhaps the support for multiprecision (MP) types. It implies that all 
    the mathematical functions used (sin, cos, (complex) jacobi-elliptic, etc.) must work in MP. I'm
    not sure, if it's practical to try to achieve that. But on the other hand - it would *really* be
    a nice feature because especially very high order elliptic designs require that. With built-in
    double-precision, one can push elliptic filters up to (prototype) orders of around 20 before 
    roundoff errors thwart these design attempts. That's usually more than enough in practice - but 
    wouldn't it be nice, if we could design elliptic filters of order 100 as well just because we 
    can?
    
  - For designing the interface of the class for polynomials, one of the challenges is that for 
    root-finders for real-valued polynomials, the roots may nevertheless be complex. My current 
    approach to this is not very elegant. Maybe that can be done better. Speaking more generally, 
    roots of a polynomial do not necessarily have the same data type as the coefficients. They lie 
    in the algebraic closure of the coefficient type. For example, the complex numbers are the 
    algebraic closure for the reals, the algebraic numbers for the rationals and it gets really wild 
    for finite fields - the algebraic closure of a finite field is an inifinite sequence of fields:
    https://en.wikipedia.org/wiki/Algebraic_closure
    But maybe these cosiderations fall into the category of the "speculative generality" code smell?
    ...but a library should be as generally applicable as possible. Maybe one should somehow have a
    third template parameter "RootType" (along with "ValueType" and "CoeffType")
  

====================================================================================================  

Ideas for follow up projects:
-FIR design and implementation (convolution)
-Musical filters (ladder, etc.)
-Adaptive filters (would involve some R&D)
-Realtime Quantile-Filtering (the code is basically done)
-Numerical Calculus (interpolation, approximation (least-squares, etc.), differentiation, 
 integration, optimization, maybe some (simple) ODE- and PDE stuff i.e. finite difference methods)