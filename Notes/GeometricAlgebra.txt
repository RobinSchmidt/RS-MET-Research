-for the implementation, make a class rsMultiVector that has a * operator implementing the 
 geometric product (maybe have also inner and outer product)
-for the Euclidean nD space, it needs to store 2^n coefficients
-it should be possible extract the n-choose-k coeffs for a particular grade k
-i think, in a first, very naive implementation, the product could be implemented in a 
 double loop, like:

inputs: a, b: the two length 2^n arrays of input coeffs
output: c:    the one length 2^n array of output coeffs

clear(c);
for(int i = 0; i < 2^n; i++) {
  for(int j = 0; j < 2^n; j++) {
    int k = indexMap( i, j);
    T   s = factorMap(i, j);
    c[k] += s*a[i]*b[j]; }}

where indexMap and factorMap are 2 matrices that are pre-created once and for all (maybe static 
members of a template class, templatized on type T and dimension n). for example, for n=3, 
m = 2^3 = 8, so we would get two 8x8 maxtrices. they are created as follows: establish a mapping
between integers 0..m-1 and the basis blades, like: 
0: 1, 1: e1, 2: e2, 3: e3, 4: e12, 5: e13, 6: e23, 7: e123

we have the following correspondences between products the basis blades (row: 1st factor, col: 2nd 
factor):

      1      e1     e2    e3   e12  e13   e23   e123
1     1      e1     e2    e3   e12  e13   e23   e123
e1    e1     1      e12   e13  0    0     e123  0
e2    e2     -e12   1     e23  0    -e123 0     0
e3    e3     -e13   -e23  1
e12   e12    0      0     e123 0    0
e13   e13    0
e23   e23    -e123
e123  e123   0

...not yet complete

-e12 == e21, e213 = -e123, etc. - even permutations reverse the sign

indexMap, X denotes: "doesn't matter" (happens when corresponding factor is 0)
row: i, col: j

  0 1 2 3 4 5 6 7
0 0 1 2 3 4 5 6 7
1 1 0
2 2   0
3 3     0
4 4
5 5
6 6
7 7


  0  1  2  3  4  5  6  7
0 1  1  1  1  1  1  1  1
1 1  1
2 1     1
3 1        1
4 1
5 1
6 1
7 1

maybe in a slightly optimized version, a sparse matrix (of tuples: index/value) should be used