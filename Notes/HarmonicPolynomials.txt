Trying to find a general rule to construct harmonic bivariate polynomials. Let's 
consider a general (4,4)th degree bivariate polynomial:

p(x,y) =   a00*x^0*y^0 + a01*x^0*y^1 + a02*x^0*y^2 + a03*x^0*y^3 + a04*x^0*y^4
         + a10*x^1*y^0 + a11*x^1*y^1 + a12*x^1*y^2 + a13*x^1*y^3 + a14*x^1*y^4
         + a20*x^2*y^0 + a21*x^2*y^1 + a22*x^2*y^2 + a23*x^2*y^3 + a24*x^2*y^4
         + a30*x^3*y^0 + a31*x^3*y^1 + a32*x^3*y^2 + a33*x^3*y^3 + a34*x^3*y^4
         + a40*x^4*y^0 + a41*x^4*y^1 + a42*x^4*y^2 + a43*x^4*y^3 + a44*x^4*y^4
 
let's take its derivative with respect to x:

p_x =     a10*x^0*y^0 +   a11*x^0*y^1 +   a12*x^0*y^2 +   a13*x^0*y^3 +   a14*x^0*y^4
      + 2*a20*x^1*y^0 + 2*a21*x^1*y^1 + 2*a22*x^1*y^2 + 2*a23*x^1*y^3 + 2*a24*x^1*y^4
      + 3*a30*x^2*y^0 + 3*a31*x^2*y^1 + 3*a32*x^2*y^2 + 3*a33*x^2*y^3 + 3*a34*x^2*y^4
      + 4*a40*x^3*y^0 + 4*a41*x^3*y^1 + 4*a42*x^3*y^2 + 4*a43*x^3*y^3 + 4*a44*x^3*y^4

...and again:

p_xx =     2*a20*x^0*y^0 +   2*a21*x^0*y^1 +   2*a22*x^0*y^2 +   2*a23*x^0*y^3 +   2*a24*x^0*y^4
       + 2*3*a30*x^1*y^0 + 2*3*a31*x^1*y^1 + 2*3*a32*x^1*y^2 + 2*3*a33*x^1*y^3 + 2*3*a34*x^1*y^4
       + 3*4*a40*x^2*y^0 + 3*4*a41*x^2*y^1 + 3*4*a42*x^2*y^2 + 3*4*a43*x^2*y^3 + 3*4*a44*x^2*y^4
     
this should be equal to -p_yy, or p_yy = -p_xx such that the Laplace equation p_xx + p_yy = 0
is satisfied. Let's find an expression fo p_yy:

p_y =    a01*x^0*y^0 + 2*a02*x^0*y^1 + 3*a03*x^0*y^2 + 4*a04*x^0*y^3
       + a11*x^1*y^0 + 2*a12*x^1*y^1 + 3*a13*x^1*y^2 + 4*a14*x^1*y^3
       + a21*x^2*y^0 + 2*a22*x^2*y^1 + 3*a23*x^2*y^2 + 4*a24*x^2*y^3
       + a31*x^3*y^0 + 2*a32*x^3*y^1 + 3*a33*x^3*y^2 + 4*a34*x^3*y^3
       + a41*x^4*y^0 + 2*a42*x^4*y^1 + 3*a43*x^4*y^2 + 4*a44*x^4*y^3
       
p_yy =    2*a02*x^0*y^0 + 2*3*a03*x^0*y^1 + 3*4*a04*x^0*y^2
        + 2*a12*x^1*y^0 + 2*3*a13*x^1*y^1 + 3*4*a14*x^1*y^2
        + 2*a22*x^2*y^0 + 2*3*a23*x^2*y^1 + 3*4*a24*x^2*y^2
        + 2*a32*x^3*y^0 + 2*3*a33*x^3*y^1 + 3*4*a34*x^3*y^2
        + 2*a42*x^4*y^0 + 2*3*a43*x^4*y^1 + 3*4*a44*x^4*y^2
        
-----------------------------------------------------------------------------------------------------

Now let's compare coefficients:

p_xx =     2*a20*x^0*y^0 +   2*a21*x^0*y^1 +   2*a22*x^0*y^2 +   2*a23*x^0*y^3 +   2*a24*x^0*y^4
       + 2*3*a30*x^1*y^0 + 2*3*a31*x^1*y^1 + 2*3*a32*x^1*y^2 + 2*3*a33*x^1*y^3 + 2*3*a34*x^1*y^4
       + 3*4*a40*x^2*y^0 + 3*4*a41*x^2*y^1 + 3*4*a42*x^2*y^2 + 3*4*a43*x^2*y^3 + 3*4*a44*x^2*y^4

p_yy =    2*a02*x^0*y^0 + 2*3*a03*x^0*y^1 + 3*4*a04*x^0*y^2
        + 2*a12*x^1*y^0 + 2*3*a13*x^1*y^1 + 3*4*a14*x^1*y^2
        + 2*a22*x^2*y^0 + 2*3*a23*x^2*y^1 + 3*4*a24*x^2*y^2
        + 2*a32*x^3*y^0 + 2*3*a33*x^3*y^1 + 3*4*a34*x^3*y^2
        + 2*a42*x^4*y^0 + 2*3*a43*x^4*y^1 + 3*4*a44*x^4*y^2


      y^0                 y^1                 y^2                 y^3           y^4
 
x^0   1*2*a20 = 1*2*a02   1*2*a21 = 2*3*a03   1*2*a22 = 3*4*a04   1*2*a23 = 0   1*2*a24 = 0
x^1   2*3*a30 = 1*2*a12   2*3*a31 = 2*3*a13   2*3*a32 = 3*4*a14   2*3*a33 = 0   2*3*a34 = 0
x^2   3*4*a40 = 1*2*a22   3*4*a41 = 2*3*a23   3*4*a42 = 3*4*a24   3*4*a43 = 0   3*4*a44 = 0
x^3         0 = 1*2*a32         0 = 2*3*a33         0 = 3*4*a34         0 = 0         0 = 0
x^4         0 = 1*2*a42         0 = 2*3*a43         0 = 3*4*a44         0 = 0         0 = 0

hmm...i think, the coeffs corresponding to the 0 = 0 entries can be chosen freely?

what's the pattern?  (i+1)*(i+2)*aij = (j+1)*(j+2)*aji  if i < degX-2 and j < degY-2?

-fill the matrix with the pattern:
 -choose a20,a30,a40, a21,a32,a41, a22,a32,a42 freely and then set a02,a12,a22, a03,a13,a23,
  a04,a14,a24 according to the rule (fills the top-left part of the matrix)
 -fill the rest with zeros, except maybe the bottom right which may also be chosen freely?
-then integrate twice with respect to x - which gives us freedom to choose two integration 
 constants (that may be functions of y?)






p    = sum_m,n a_mn * x^m * y^n
p_xx = sum_m,n a_mn * m*(m-1)*x^(m-2) * y^n
p_yy = sum_m,n a_mn * n*(n-1)*y^(n-2) * x^m

p_yy = -p_xx:   a_{m-2,n} * m*(m-1) ?= -a_{m,n-2} * n*(n-1)   for m,n >= 2

maybe implement an alternative version of isHarmonic that doe not actually compute the 
derivatives but instead checks the criterion given above










