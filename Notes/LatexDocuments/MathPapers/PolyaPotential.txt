Some text and code snippets that may eventually go into the .tex file. This file serves as a sort
of scratchpad for the actual tex file. It also contains Sage code to produce the expressions given
in the paper.

----------------------------------------------------------------------------------------------------
Sage Code for producing the expressions for z^n for positive n:
 
To see what that means in terms of real and imaginary part of the result of $z^n$, we'll again use a 
little snippet of Sage code where we can tweak \texttt{n} and inspect the results:

n = 5	               # You may tweak this parameter
var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = z^n
w.real(), w.imag()


This code gives the following results for \texttt{n = 0..7}:

n  Real                                      Imag
0  1,                                        0 
1  x,                                        y
2  x^2 - y^2,                                2*x*y
3  x^3 - 3*x*y^2,                            3*x^2*y - y^3
4  x^4 - 6*x^2*y^2  + y^4,                   4*x^3*y - 4*x*y^3
5  x^5 - 10*x^3*y^2 + 5*x*y^4,               5*x^4*y - 10*x^2*y^3 + y^5
6  x^6 - 15*x^4*y^2 + 15*x^2*y^4 - y^6,      6*x^5*y - 20*x^3*y^3 + 6*x*y^5
7  x^7 - 21*x^5*y^2 + 35*x^3*y^4 - 7*x*y^6,  7*x^6*y - 35*x^4*y^3 + 21*x^2*y^5 - y^7


Sage Code for producing the expressions for z^n for positive n:

var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w =  z^5                  # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V


From the produced U,V, we may read off P. After some manual manipulations, the results are:

n  Potential
0   x
1  (x^2 - y^2) / 2
2  (x^3 - 3*x*y^2) / 3
3  (x^4 - 6*x^2*y^2 + y^4) / 4
4
5
6
7

ToDo:
-List results for the potential. Could it be that it is just the real part from the u,v table above 
 but shifted one row up and divided by n? That would mean that some things in the paper could be 
 simplified. We don't need to evaluate the integral. But maybe better to do it and just at the end 
 mention that it actually agrees with the simpler way to evaluate it. It could also simplify the 
 code to evaluate the Polya potentials. We'd just call the function for the real part with n+1 and 
 then divide the end result by n+1.
 
----------------------------------------------------------------------------------------------------
For negative n, we can use the same Sage snippet and just replace the function of interest by some 
negative power of z or take the reciprocal of the corresponding positive power (e.g. w = 1 / z^5 
instead of w =  z^5). Here are the results for n = 2..6:

n  Real part of numerator                          Imaginary part of numerator
2  x^2 - y^2                                       2*x*y                         
3  x^3 - 3*x*y^2                                   3*x^2*y - y^3                  
4  x^4 - 6*x^2*y^2  + y^4                          4*x^3*y - 4*x*y^3
5  x^5 - 10*x^3*y^2 + 5*x*y^4                      5*x^4*y - 10*x^2*y^3 + y^5
6  x^6 - 15*x^4*y^2 + 15*x^2*y^4 - y^6             6*x^5*y - 20*x^3*y^3 + 6*x*y^5

n  Denominator
2  (x^2 - y^2)^2                           +  4*x^2*y^2
3  (x^3 - 3*x*y^2)^2                       + (3*x^2*y - y^3)^2
4  (x^4 - 6*x^2*y^2 + y^4)^2               + 16*(x^3*y - x*y^3)^2
5  (x^5 - 10*x^3*y^2 + 5*x*y^4)^2          + (5*x^4*y - 10*x^2*y^3 + y^5)^2
6  (x^6 - 15*x^4*y^2 + 15*x^2*y^4 - y^6)^2 + 4*(3*x^5*y - 10*x^3*y^3 + 3*x*y^5)^2

n  Potential
2  (-1/1) *  x                           / (x^2 + y^2)
3  (-1/2) * (x^2 - y^2)                  / (x^4 + 2*x^2*y^2 + y^4)
4  (-1/3) * (x^3 - 3*x*y^2)              / (x^6 + 3*x^4*y^2 + 3*x^2*y^4 + y^6)
5  (-1/4) * (x^4 - 6*x^2*y^2 + y^4)      / (x^8 + 4*x^6*y^2 + 6*x^4*y^4 + 4*x^2*y^6 + y^8)
6  (-1/5) * (x^5 - 10*x^3*y^2 + 5*x*y^4) / (x^10 + 5*x^8*y^2 + 10*x^6*y^4 + 10*x^4*y^6 + 5*x^2*y^8 + y^10)

Looks like the numerators of real and imaginary parts are exactly as in the corresponding positive 
powers of z? And the denominator is always Re^2 + Im^2? And in the potential, the denominator is 
(x^2 + y^2)^(n-1). And the numerator of the n-th line is the same as the real part of the (n-1)-th 
line and the whole thing is divided by n-1?  


Maybe try this also:
n = 5	               # You may tweak this parameter
var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = 1 / z^n
w.real(), w.imag()

----------------------------------------------------------------------------------------------------
The general sage code for producing the expressions the Polya vector fields and potential:

var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = z^2                 # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V	 
  
----------------------------------------------------------------------------------------------------
For w = log(z), the U,V integrals don't seem to match. And I'm not talking about the integration 
constants here. The results of both integrations seem to be incompatible. How can this be? The code
above produces:

  u = log(abs(x + I*y))
  v = -arctan2(y, x)
  U = I*y*log(x + I*y) + x*log(abs(x + I*y)) - x
  V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))

and I think, the expressions for U and V are not compatible. There's even an I in U. Maybe instead 
of using the code above, let's try to manually integrate log(sqrt(x^2+y^2)) wrt x and 
-atan(y/x) wrt y:

var("x y")
assume(x, "real")
assume(y, "real")
u = log(sqrt(x^2+y^2))     # ln(...) works just the same
v = -atan(y/x)
U = integral(u, x)
V = integral(v, y)
U, V

This produces:

  U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
  V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))

The results are indeed different! And I don't really think, they are equivalent. Let's try to 
evaluate them both for some values of x,y:

x = 2
y = 3
U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))
U, V, N(U), N(V)

This gives U = 2.328..., V = -1.769... so the expressions are indeed different. What's going on? 
Maybe verify the Cauchy-Riemann equation for log. But wait! Unequal results do not necessarily mean 
that they are incompatible. It could still be that they have some common term plus a different 
integration constant each. Let's try to bring V into the form of U:

U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))
  = (-1/2*x*2*y*arctan(y/x)/x - -1/2*x*log(y^2/x^2 + 1))
  = -y*arctan(y/x) + 1/2*x*log(y^2/x^2 + 1)

Maybe the expressions are indeed compatible but we don't get a clean seperation between the "common 
part" and the "integration constants" in the sense that both parts are terms in a sum? Maybe 
everything gets tangled up? Can we untangle it? Maybe subtract V from U and/or U from V. That should
cancel the "common part" and leave only the integration constants (but with negative sign for the 
subtrcated part)

var("x y")
assume(x, "real")
assume(y, "real")
U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -y*arctan(y/x) + 1/2*x*log(y^2/x^2 + 1)
C = U - V
simplify(C)

Let's verify if differentiating U and V does indeed give back our original u,v:

var("x y")
assume(x, "real")
assume(y, "real")
U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -y*arctan(y/x) + 1/2*x*log(y^2/x^2 + 1)
u = diff(U, x)
v = diff(V, y)
u, v

This gives:

u = x^2/(x^2 + y^2) + 1/(x^2/y^2 + 1) + 1/2*log(x^2 + y^2) - 1
v = -arctan(y/x)

v looks right by u looks wrong. It should be u = log(sqrt(x^2+y^2)). Let's evaluate both expressions
for some given values of x,y:

x = 2
y = 3
u1 = log(sqrt(x^2+y^2))
u2 = x^2/(x^2 + y^2) + 1/(x^2/y^2 + 1) + 1/2*log(x^2 + y^2) - 1
u1, N(u1), u2, N(u2)

gives:

u1 = log(sqrt(13)) = 1.28247467873077
u2 = 1/2*log(13)   = 1.28247467873077

So the expressions seem to be indeed equivalent. Let's check the Cauchy-Riemann condition:

var("x y")
assume(x, "real")
assume(y, "real")
u = log(sqrt(x^2+y^2))     # ln(...) works just the same
v = -atan(y/x)
uy = diff(u, y)
vx = diff(v, x)
uy, vx

gives:

   uy = y/(x^2 + y^2) 
   vx = y/(x^2*(y^2/x^2 + 1))

Which are equal - the vx expression can be simplified into uy. So, the CR condititions are verified.


Maybe the algorithm to compute U,V by integrating
u,v and then finding like terms does not always work. Try the algo from the BÃ¤rwolff book. It's also
desribed here:

https://mathinsight.org/conservative_vector_field_find_potential

This text:

https://www.andrew.cmu.edu/user/yuchingw/15-3-and-15-4-handout-z8e1g9.pdf

says that it's sometimes easier to find a potential by combining \int f dx, \int g dy, \int h dz in 
the 3D case. Maybe so far, we have only encountered such easy cases.

The algo goes like this:

We start with the two equations:

  (1) dP/dx = u(x,y)
  (2) dP/dy = v(x,y)

and want to find P(x,y) such that (1) and (2) hold. To satisfy (1), we integrate (1) wrt x:

  P(x,y) = U(x,y) + g(y)

Where U(x,y) is the integral of u(x,y) wrt x and g(y) is an as of yet unknown function of y alone 
which is our integration constant (it's constant wrt x). Now we differentiate the so found P wrt y 
and equate it to our given v:

  dP/dy = dU/dy + dg/dy = v(x,y)

such that:

   dg/dy = v(x,y) - dU/dy 
   
which gives us an expression for dg/dy. We can integrate the RHS wrt to y to find our unknown g(y).
To find our potential, we add that found g to U. 


var("x y")
assume(x, "real")
assume(y, "real")
u  = log(sqrt(x^2+y^2))     # ln(...) works just the same
v  = -atan(y/x)
U  = integral(u, x)
Uy = diff(U, y)      
gy = v - Uy
g  = integral(gy, y)
P  = U + g
P

gives:

P = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1)) - x

Let's verify it:

var("x y")
P = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1)) - x
u = diff(P, x)
v = diff(P, y)
u, v

gives:

u = 1/2*log(y^2/x^2 + 1) - 1
v = -arctan(y/x)

v looks good but u looks strange. Let's verify u numerically:

x = 2
y = 3
u1 = log(sqrt(x^2+y^2))
u2 = 1/2*log(y^2/x^2 + 1) - 1
N(u1), N(u2)

Nope! It's wrong! The problem may be that the 

gy = v - Uy

line may produce something that is not a function of y alone.


Let's try the apporach explained here:

https://mathematica.stackexchange.com/questions/100758/finding-scalar-potential-function

DSolve[{D[f[x, y], x] == 2 x y - Sin[x], D[f[x, y], y] == x^2 + Exp[3 y]}, f[x, y], {x, y}]

should produce:

(* {{f[x, y] -> E^(3 y)/3 + x^2 y + C[1] + Cos[x]}} *)

...but not really in Wolfram Alpha. But it works in Wolfram Cloud. OK, so let's now try the same 
technique with our actual function of interest..

DSolve[{D[f[x, y], x] == Log[Sqrt[x^2 + y^2]], D[f[x, y], y] == -ArcTan[y/x] }, f[x, y], {x, y}]

...this just gives the input back as output. Apparently Mathematica can't do it.

----------------------------------------------------------------------------------------------------
Let's try w = sqrt(z)

var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = z^(1/2)                 # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V	

Sage can't even do the integrals in this case. Maybe the inverse functions are just too difficult to 
handle? When I comment the computation of the integrals and look only at u,v, I get:

u =  sqrt(abs(x + I*y))*cos(1/2*arctan2(y, x))
v = -sqrt(abs(x + I*y))*sin(1/2*arctan2(y, x))

which we can manipulate into: 

u =  (x^2 + y^2)^(1/4) * cos(arctan2(y, x) / 2)
v = -(x^2 + y^2)^(1/4) * sin(arctan2(y, x) / 2)

Let's try to find U from that:

var("x y")
assume(x, "real")
assume(y, "real")
u = (x^2 + y^2)^(1/4) * cos(arctan(y/x) / 2)
U = integral(u, x)
U

That actually works and gives:

U = 2/3*((x^2 + y^2)*cos(1/4*arctan2(y, x))^2 
    + (x^2 + y^2)*sin(1/4*arctan2(y, x))^2)*cos(3/2*arctan2(y, x))/(x^2 + y^2)^(1/4)

But trying the same for V fails. Maybe try it with Mathematica.

----------------------------------------------------------------------------------------------------
Let's try w = 1/(1+z^2). We need two more assume statement to convice Sage to integrate it:

var("x y")
assume(x, "real")
assume(y, "real")
assume(y+1 > 0)
assume(y-1 > 0)
z = x + I*y
w = 1/(1+z^2)                # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V	

This gives:

u = (x^2 - y^2 + 1)/(4*x^2*y^2 + (x^2 - y^2 + 1)^2)
v = 2*x*y/(4*x^2*y^2 + (x^2 - y^2 + 1)^2)
U = 1/2*arctan(x/(y + 1)) - 1/2*arctan(x/(y - 1))
V = 1/2*arctan(1/2*(x^2 + y^2 - 1)/x)

...which seems again be an incompatible result. Figure out, why this happens. Try to find the 
simplemost example function for which this happens.

----------------------------------------------------------------------------------------------------
Some Ideas:

-For potential functions with multiple saddles, figure out the geodesics that connect these saddles.
 What shape does it have as curve in R^3 and what shape has its projection down to the xy-plane? Try
 this with the Riemann zeta function. Maybe the geodesics between neighboring nontrivial saddles are
 straight lines when projected down to the xy-plane? What shapes connect the trivial with the 
 nontrivial saddles?
 
-Verify in plots and numerically, if the following things are true and if so, try to prove them. At 
 the moment, these statements are just my hunches:
 -For a saddle of order n (a regular saddle has order 2, a monkey saddle 3, etc.): 
  -All directional derivatives up to n-1 vanish at the saddle point.
  -There are n directions into which additionally also the n-th directional derivative vanishes.
  -These directions are precisely halfway in between the directions of the contours that meet at 
   the saddle. At a saddle of order n, n contour lines meet.
  -The angle between these directions is a multiple of 360Â°/n.
  -If you follow these directions, you'll be lead either to a neighboring saddle or else you'll be 
   on the fastest path to infinity. I think, away from the saddle, these directions coincide with 
   the direction of the gradient but at the saddle itself, the gradient is zero but at the saddle,
   these directions can be used as a replacement for the gradient if want want to head off to the 
   next saddle or to infinity. Gradient descent starting from anwhere is actually supposed o take 
   you to some nearby saddle but if the starting point is one where the gradient vanishes, we need 
   another way to pick the direction and this could be it.
  -Or - wait - maybe it's the other way around: along the n contour lines that meet at the saddle,
   *all* derivatives vanish. by derivative, I mean the directional derivative into the direction of 
   the contour line. And in between these directions, there are n directions into which the n-th 
   derivative is extremal (minimal or maximal, .i.e highly positive or highly negative). Away from 
   the saddle, these directions can be replaced by the gradient. We always take the direction of the
   extremal highest, non-vanishing derivative. Normally, this is the gradient but at saddles, we 
   need to use a higher derivative to determine our direction.
  -The goal is to develop an algorithm that is a generalization of gradient descent to find the 
   closest saddle. If we already are at a saddle, the closest saddle is the point where we are but 
   in this case, we want to find one of the neighboring saddles. The gradient vanishes so we pick a 
   direction based on a higher derivative. For a 2nd order saddle, that would be one of the four 
   directions of extremal curvature. It's four and not two because we count the opposing directions 
   as two directions. For a 3rd order saddle, it will be one of the 6 directions of extremal 3rd 
   derivative, etc. As soon as we are a tiny bit away from the saddle, we can switch back to using 
   the gradient.
  -To find such a direction numerically, we could also evaluate the length of the gradient in a 
   circluar neighborhood around the saddle and pick one of the angles where this length becomes 
   extremal. The higher derivative criterion is more a theoretical thing. In practice, some sort of
   bisection strategy or 1D gradient desecent of the length of the gradient as function of angle may
   be more suitable.
  -If there is just one saddle, could it be that some aspects of the metric tensor of the Polya 
   potential surface depend only on the distance from the saddle but not on the direction. Maybe
   the infinitesimal area scaling could factor could be such a quantity?
   
---------------------------------------------------------------------------------------------------- 
Polya potentaial of rational functions:

Let's investigate the potentials of various rational functions.

One pole filter:

             1
  f(z) = ---------    ->    P(x,y) = ?
          1 + a*z

...tbc...


The potential field of general dipole can be expressed as:

            a*x + b*y
  P(x,y) = -----------
            x^2 + y^2

where a,b determine the strength and direction of the dipole. The vector (a,b) is called the 
dipole moment, see:

  https://en.wikipedia.org/wiki/Dipole#Field_from_an_electric_dipole

Look also at linfracs and biquads and try to find general formulas. The eventual goal is to look at
Polya potentials of filter transfer functions and understand from the, what the filter does
  
----------------------------------------------------------------------------------------------------
Maybe certain things are simpler or even only tractable at all, when we use polar coordinates? For
example, functions like f(z) = z^c where c is not necessarily integer but may be a real or even 
complex number or also f(z) = log(z). So far, I have not yet succeeded to produce formulas for their
Polya potentials. Maybe in polar coordinates, it's easier? 

Let's assume we want to find alternative formulas based on polar coordinates for the potnetial of:

  w = f(z) = z^n

for an integer n. Let's take z,w be expressed in polar coordinates as

  z = r * e^( i*p)  
  w = s * e^(-i*q)
  
where r is the radius and p the phase angle of z (could be denoted as phi in greek) and s,q are 
radius and angle of w. I have baked a minus sign into the definition of the angle q of w for the 
exact same reason that we use a minus sign in the imaginary part in the cartesian formulation of the
Polya vector field. In the cartesian formulation, we negate the imaginary part. Here, we negate the 
angle (well - does that make sense or is it even necessary? I'm not sure yet.). We then have:

  w = (r * e^(i*p))^n = r^n * e^(i*n*p)

So we can extract the two bivariate functions:

  s(r,p) =  r^n
  q(r,p) = -n*p
  
for computing s,q in terms of r,p. This is a sort of Polya vector field in polar coordinates.
The goal is now to find a single valued bivariate function P(r,p) which has these two functions as
partial derivatives with respect to r and p. The nice thing is that s and q, both seen as functions 
of r,p, do actually only depend on one of the variables. The phase p of z is formally an argument 
for s but it's not used in the right hand side. Same story for q and r. Due to this decoupling, it's 
actually easy to write down a function P(r,p) with the given partial derivatives:

            r^(n+1)       1
  P(r,p) = ---------  -  --- * n * p^2
              n+1         2

This is a sort of potential function into which we can plug in the radius r and angle p of z and if 
we take the partial derivatives of this function with respect to r and p, we get out the radius s 
and angle q of w. And the formula should be applicable to non-integer values of n just the same.

It was clear that it is possible to find such a potential P because s,q were decoupled. Each 
function depends only on a single variable. But will such a construction of P be possible in general
for any analytic function or is that a special property of the power function f(z) = z^n? Let's 
review the Cauchy-Riemann equations in polar coordinates. They are given by





See:
https://users.math.msu.edu/users/shapiro/teaching/classes/425/crpolar.pdf
https://math.stackexchange.com/questions/1245754/cauchy-riemann-equations-in-polar-form
https://math.stackexchange.com/questions/205671/proof-of-cauchy-riemann-equations-in-polar-coordinates


----------------------------------------------------------------------------------------------------   
[Done - Nope, this doesn't seem to be the case]:

What about taking double integrals of P(x,y) over a circular area around a saddle. If there are 
no other saddle nearby, this should always average out to almost the function value at the 
center, I think. Consider one saddle alone and think of its symmetries. Maybe it even works 
for shape that are symmetric only wrt rotations to multiples of 90Â° (and not necessarily all
angles). All the "above stuff" (values above the center value) will be counteracted by an 
equal amount of "below stuff". So, a square shape would also qualify but not a rectangle.
A regular octagon would also work, a 12-gon, 16- gon - any regular 4k-gon. But the sides could 
also bend in or outward, as long as they do it in the same shape every 90Â°. What about more
general points?

Wild guess: \int_a^b \int_c^d P(x,y) dx dy = P((c+d)/2, (a+b)/2) if the area is a square, i.e.
b-a = d-c. Try it! It should work for other shapes too, if they have the required symmetry but
the square is simplest to actually evaluate. Or maybe have to divide the integral by the area of 
the integration region. That way, we compute a local average of P(x,y). So here, divide by 
(b-a)^2


Here is a Sage script trying out the idea that the local average of P(x,y) *around* some (x0, y0)
should be equal to the value *at* (x0, y0):
 
# Setup:
var("x y")
P  = (x^2 - y^2) / 2          # Polya potential
s  = 3                        # Size of square region
x0 = 2                        # x-coordinate of center
y0 = 5                        # y-coordinate of center

# Computation:
a  = x0 - s/2                 # Lower integration limit for x
b  = x0 + s/2                 # Upper integration limit for x
c  = x0 - s/2                 # Lower integration limit for y
d  = x0 + s/2                 # Upper integration limit for y
Ix = integral(P,  x, a, b)    # Definite integral of P wrt x in a..b
I  = integral(Ix, y, c, d)    # Definite integral wrt x and y
A  = I / s^2                  # Local average of P around (x0, y0)
V  = P(x = x0, y = y0)        # Local value of P at (x0, y0)

# Output:
Ix, I, A, V 


....aaand the result it: A and V are not equal - but: I and A seem to be always zero no matter how 
we choose s, x0, y0! Saying that a certain (double) integral will alway be zero is actually be an 
even stronger statement that saying that is is euqal to some value that depends on where the 
integration region is centered. Does our integral actually represent the local average? What about 
integration constants?

ToDo:
-Try more Poly potentials ...OK - done ...and it fails! This zero result seems to be specific to
 P(x,y) = (x^2 - y^2) / 2. For (x^3 - 3*x*y^2) / 3, it still works when x0 = y0 = 0 but with 
 (x^4 - 6*x^2*y^2 + y^4) / 4 even that fails. So, this wild idea was nonsense after all. ...would 
 have been too good, if true.
-Maybe try circular integration regions. Maybe with those, it could work because they have even more 
 symmetry. But the integrals will be much harder to evaluate. Maybe the integration region needs to
 have the same symmetry as the saddle itself? Or wait - no - the saddle has actually an 
 antisymmetry with respect to a rotation by 90Â°. Maybe the symmetry of the integration region must 
 match the antisymmetry of the saddle. That happend to be the case for a square region and
 P(x,y) = (x^2 + y^2) / 2. And maybe a cirlce always works because it has all rotational symmetries
 up to infinity. The rationale is: P(x,y) has (anti?)symmetry with respect to rotations by multiples 
 of 90Â° and so does the square. (x^3 - 3*x*y^2) / 3 has the same symmetries like a hexagon, 
 (x^4 - 6*x^2*y^2 + y^4) / 4 like an octagon. Maybe if we pick integration regions that have the 
 same symmetry, the integral will evaluate to zero. That is obvious from the plots and totally 
 unremarkable when x0 = y0 = 0 - but if the integral is still zero when we shift the center away 
 from the origin, that would actually not be obvious at all. This did work for (x^2 - y^2) / 2 and 
 a square integration region.
-I think, this should then apply to all scalar fields that satisfy the Laplace PDE. I think that 
 also means that any patch of the surface is a minimal surface wrt to its boundary.