Some text and code snippets that may eventually go into the .tex file. This file serves as a sort
of scratchpad for the actual tex file. It also contains Sage code to produce the expressions given
in the paper.


----------------------------------------------------------------------------------------------------
Sage Code for producing the expressions for z^n for positive n:
 
To see what that means in terms of real and imaginary part of the result of $z^n$, we'll again use a 
little snippet of Sage code where we can tweak \texttt{n} and inspect the results:

n = 5	               # You may tweak this parameter
var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = z^n
w.real(), w.imag()

This code gives the following results for \texttt{n = 0..7}:

\begin{verbatim}
n  Real                                      Imag
0: 1,                                        0 
1: x,                                        y
2: x^2 - y^2,                                2*x*y
3: x^3 - 3*x*y^2,                            3*x^2*y - y^3
4: x^4 - 6*x^2*y^2  + y^4,                   4*x^3*y - 4*x*y^3
5: x^5 - 10*x^3*y^2 + 5*x*y^4,               5*x^4*y - 10*x^2*y^3 + y^5
6: x^6 - 15*x^4*y^2 + 15*x^2*y^4 - y^6,      6*x^5*y - 20*x^3*y^3 + 6*x*y^5
7: x^7 - 21*x^5*y^2 + 35*x^3*y^4 - 7*x*y^6,  7*x^6*y - 35*x^4*y^3 + 21*x^2*y^5 - y^7
\end{verbatim} 
 
----------------------------------------------------------------------------------------------------
Sage Code for producing the expressions for z^n for negative n, i.e z^(-n):

var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = 1 / z^5               # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V




Results for n = 2..6:

n  Real part of numerator                          Imaginary part of numerator
2  x^2 - y^2                                       2*x*y                         
3  x^3 - 3*x*y^2                                   3*x^2*y - y^3                  
4  x^4 - 6*x^2*y^2  + y^4                          4*x^3*y - 4*x*y^3
5  x^5 - 10*x^3*y^2 + 5*x*y^4                      5*x^4*y - 10*x^2*y^3 + y^5
6  x^6 - 15*x^4*y^2 + 15*x^2*y^4 - y^6             6*x^5*y - 20*x^3*y^3 + 6*x*y^5

n  Denominator
2  (x^2 - y^2)^2                           +  4*x^2*y^2
3  (x^3 - 3*x*y^2)^2                       + (3*x^2*y - y^3)^2
4  (x^4 - 6*x^2*y^2 + y^4)^2               + 16*(x^3*y - x*y^3)^2
5  (x^5 - 10*x^3*y^2 + 5*x*y^4)^2          + (5*x^4*y - 10*x^2*y^3 + y^5)^2
6  (x^6 - 15*x^4*y^2 + 15*x^2*y^4 - y^6)^2 + 4*(3*x^5*y - 10*x^3*y^3 + 3*x*y^5)^2

n  Potential
2  -x / (x^2 + y^2)
3  -1/2*(x^2 - y^2) / (x^4 + 2*x^2*y^2 + y^4)
4  -1/3*(x^3 - 3*x*y^2) / (x^6 + 3*x^4*y^2 + 3*x^2*y^4 + y^6)
5  -1/4*(x^4 - 6*x^2*y^2 + y^4) / (x^8 + 4*x^6*y^2 + 6*x^4*y^4 + 4*x^2*y^6 + y^8)
6  -1/5*(x^5 - 10*x^3*y^2 + 5*x*y^4) / (x^10 + 5*x^8*y^2 + 10*x^6*y^4 + 10*x^4*y^6 + 5*x^2*y^8 + y^10)

Looks like the numerators of real and imaginary parts are exactly as in the corresponding positive 
powers of z? And the denominator is always Re^2 + Im^2? And in the potential, the denominator is 
(x^2 + y^2)^(n-1). And the numerator of the n-th line is the same as the real part of the (n-1)-th 
line and the whole thing is divided by n-1?  


Maybe try this also:
n = 5	               # You may tweak this parameter
var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = 1 / z^n
w.real(), w.imag()

----------------------------------------------------------------------------------------------------
The general sage code for producing the expressions the Polya vector fields and potential:

var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = z^2                 # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V	 
  
----------------------------------------------------------------------------------------------------
For w = log(z), the U,V integrals don't seem to match. And I'm not talking about the integration 
constants here. The results of both integrations seem to be incompatible. How can this be? The code
above produces:

  u = log(abs(x + I*y))
  v = -arctan2(y, x)
  U = I*y*log(x + I*y) + x*log(abs(x + I*y)) - x
  V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))

and I think, the expressions for U and V are not compatible. There's even an I in U. Maybe instead 
of using the code above, let's try to manually integrate log(sqrt(x^2+y^2)) wrt x and 
-atan(y/x) wrt y:

var("x y")
assume(x, "real")
assume(y, "real")
u = log(sqrt(x^2+y^2))     # ln(...) works just the same
v = -atan(y/x)
U = integral(u, x)
V = integral(v, y)
U, V

This produces:

  U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
  V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))

The results are indeed different! And I don't really think, they are equivalent. Let's try to 
evaluate them both for some values of x,y:

x = 2
y = 3
U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))
U, V, N(U), N(V)

This gives U = 2.328..., V = -1.769... so the expressions are indeed different. What's going on? 
Maybe verify the Cauchy-Riemann equation for log. But wait! Unequal results do not necessarily mean 
that they are incompatible. It could still be that they have some common term plus a different 
integration constant each. Let's try to bring V into the form of U:

U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1))
  = (-1/2*x*2*y*arctan(y/x)/x - -1/2*x*log(y^2/x^2 + 1))
  = -y*arctan(y/x) + 1/2*x*log(y^2/x^2 + 1)

Maybe the expressions are indeed compatible but we don't get a clean seperation between the "common 
part" and the "integration constants" in the sense that both parts are terms in a sum? Maybe 
everything gets tangled up? Can we untangle it? Maybe subtract V from U and/or U from V. That should
cancel the "common part" and leave only the integration constants (but with negative sign for the 
subtrcated part)

var("x y")
assume(x, "real")
assume(y, "real")
U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -y*arctan(y/x) + 1/2*x*log(y^2/x^2 + 1)
C = U - V
simplify(C)

Let's verify if differentiating U and V does indeed give back our original u,v:

var("x y")
assume(x, "real")
assume(y, "real")
U =  y*arctan(x/y) + 1/2*x*log(x^2 + y^2) - x
V = -y*arctan(y/x) + 1/2*x*log(y^2/x^2 + 1)
u = diff(U, x)
v = diff(V, y)
u, v

This gives:

u = x^2/(x^2 + y^2) + 1/(x^2/y^2 + 1) + 1/2*log(x^2 + y^2) - 1
v = -arctan(y/x)

v looks right by u looks wrong. It should be u = log(sqrt(x^2+y^2)). Let's evaluate both expressions
for some given values of x,y:

x = 2
y = 3
u1 = log(sqrt(x^2+y^2))
u2 = x^2/(x^2 + y^2) + 1/(x^2/y^2 + 1) + 1/2*log(x^2 + y^2) - 1
u1, N(u1), u2, N(u2)

gives:

u1 = log(sqrt(13)) = 1.28247467873077
u2 = 1/2*log(13)   = 1.28247467873077

So the expressions seem to be indeed equivalent. Let's check the Cauchy-Riemann condition:

var("x y")
assume(x, "real")
assume(y, "real")
u = log(sqrt(x^2+y^2))     # ln(...) works just the same
v = -atan(y/x)
uy = diff(u, y)
vx = diff(v, x)
uy, vx

gives:

   uy = y/(x^2 + y^2) 
   vx = y/(x^2*(y^2/x^2 + 1))

Which are equal - the vx expression can be simplified into uy. So, the CR condititions are verified.


Maybe the algorithm to compute U,V by integrating
u,v and then finding like terms does not always work. Try the algo from the BÃ¤rwolff book. It's also
desribed here:

https://mathinsight.org/conservative_vector_field_find_potential

This text:

https://www.andrew.cmu.edu/user/yuchingw/15-3-and-15-4-handout-z8e1g9.pdf

says that it's sometimes easier to find a potential by combining \int f dx, \int g dy, \int h dz in 
the 3D case. Maybe so far, we have only encountered such easy cases.

The algo goes like this:

We start with the two equations:

  (1) dP/dx = u(x,y)
  (2) dP/dy = v(x,y)

and want to find P(x,y) such that (1) and (2) hold. To satisfy (1), we integrate (1) wrt x:

  P(x,y) = U(x,y) + g(y)

Where U(x,y) is the integral of u(x,y) wrt x and g(y) is an as of yet unknown function of y alone 
which is our integration constant (it's constant wrt x). Now we differentiate the so found P wrt y 
and equate it to our given v:

  dP/dy = dU/dy + dg/dy = v(x,y)

such that:

   dg/dy = v(x,y) - dU/dy 
   
which gives us an expression for dg/dy. We can integrate the RHS wrt to y to find our unknown g(y).
To find our potential, we add that found g to U. 


var("x y")
assume(x, "real")
assume(y, "real")
u  = log(sqrt(x^2+y^2))     # ln(...) works just the same
v  = -atan(y/x)
U  = integral(u, x)
Uy = diff(U, y)      
gy = v - Uy
g  = integral(gy, y)
P  = U + g
P

gives:

P = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1)) - x

Let's verify it:

var("x y")
P = -1/2*x*(2*y*arctan(y/x)/x - log(y^2/x^2 + 1)) - x
u = diff(P, x)
v = diff(P, y)
u, v

gives:

u = 1/2*log(y^2/x^2 + 1) - 1
v = -arctan(y/x)

v looks good but u looks strange. Let's verify u numerically:

x = 2
y = 3
u1 = log(sqrt(x^2+y^2))
u2 = 1/2*log(y^2/x^2 + 1) - 1
N(u1), N(u2)

Nope! It's wrong! The problem may be that the 

gy = v - Uy

line may produce something that is not a function of y alone.


Let's try the apporach explained here:

https://mathematica.stackexchange.com/questions/100758/finding-scalar-potential-function

DSolve[{D[f[x, y], x] == 2 x y - Sin[x], D[f[x, y], y] == x^2 + Exp[3 y]}, f[x, y], {x, y}]

should produce:

(* {{f[x, y] -> E^(3 y)/3 + x^2 y + C[1] + Cos[x]}} *)

...but not really in Wolfram Alpha. But it works in Wolfram Cloud. OK, so let's now try the same 
technique with our actual function of interest..

DSolve[{D[f[x, y], x] == Log[Sqrt[x^2 + y^2]], D[f[x, y], y] == -ArcTan[y/x] }, f[x, y], {x, y}]

...this just gives the input back as output. Apparently Mathematica can't do it.

----------------------------------------------------------------------------------------------------
Let's try w = sqrt(z)

var("x y")
assume(x, "real")
assume(y, "real")
z = x + I*y
w = z^(1/2)                 # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V	

Sage can't even do the integrals in this case. Maybe the inverse functions are just too difficult to 
handle?

----------------------------------------------------------------------------------------------------
Let's try w = 1/(1+z^2). We need two more assume statement to convice Sage to integrate it:

var("x y")
assume(x, "real")
assume(y, "real")
assume(y+1 > 0)
assume(y-1 > 0)
z = x + I*y
w = 1/(1+z^2)                # function of interest
u =  w.real() 
v = -w.imag()
U = integral(u, x)
V = integral(v, y)
u, v, U, V	

This gives:

u = (x^2 - y^2 + 1)/(4*x^2*y^2 + (x^2 - y^2 + 1)^2)
v = 2*x*y/(4*x^2*y^2 + (x^2 - y^2 + 1)^2)
U = 1/2*arctan(x/(y + 1)) - 1/2*arctan(x/(y - 1))
V = 1/2*arctan(1/2*(x^2 + y^2 - 1)/x)

...which seems again be an incompatible result. Figure out, why this happens. Try to find the 
simplemost example function for which this happens.