

Some collected material and links for number theoretic transforms.

This page https://www.programmersought.com/article/8906403181/ has a list of prime moduli that may 
be suitable for NTT:

g is the original root of mod(r*2^k+1)      ...what does this mean?
Prime number        r   k   g
3                   1   1   2
5                   1   2   2
17                  1   4   3
97                  3   5   5
193                 3   6   5
257                 1   8   3
7681                15  9   17
12289               3   12  11
40961               5   13  3
65537               1   16  3
786433              3   18  10
5767169             11  19  3
7340033             7   20  3
23068673            11  21  3
104857601           25  22  3
167772161           5   25  3
469762049           7   26  3
1004535809          479 21  3
2013265921          15  27  31
2281701377          17  27  3
3221225473          3   30  5               ...3221225473 looks most useful!
75161927681         35  31  3
77309411329         9   33  7
206158430209        3   36  22
2061584302081       15  37  7
2748779069441       5   39  3
6597069766657       3   41  5
39582418599937      9   42  5
79164837199873      9   43  5
263882790666241     15  44  7
1231453023109121    35  45  3
1337006139375617    19  46  3
3799912185593857    27  47  5
4222124650659841    15  48  19
7881299347898369    7   50  6
31525197391593473   7   52  3
180143985094819841  5   55  6
1945555039024054273 27  56  5
4179340454199820289 29  57  3

Does that mean k is the highest exponent for the tansform length N = 2^k? If so, the number 
3221225473 seems most attractive: it fits into 32 bits, such that we don't need expect overflowing
multiplications when computing in 64 bit and it actually fits rather tightly: log2 of it is 
31.58..., so we almost get the full 32 bit resolution. And it allows for long transform lengths 
(up to 2^30, if that's really what k means).

---------------------------------------------------------------------------------------------------
Other resources:

http://www.apfloat.org/ntt.html
https://www.nayuki.io/page/number-theoretic-transform-integer-dft
https://ieeexplore.ieee.org/document/1162555
https://ieeexplore.ieee.org/document/1672090
https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf
https://en.wikipedia.org/wiki/Talk%3ANumber-theoretic_transform

http://www.faginfamily.net/barry/Papers/Discrete%20Weighted%20Transforms.pdf
says: p = 2^61 - 1 is a Mersenne prime and 
h = 2147483648 + 1033321771269002680i is primitive root of unity in Z_p...oh! it has a 
imaginary part? Is this some sort of complex modular arithemtic?

https://www.programmersought.com/article/13432387902/
998244353,1004535809, 469762049, 998244353

https://www.programmersought.com/article/8906403181/ 

---------------------------------------------------------------------------------------------------
This https://www.programmersought.com/article/88812332223/ some code. It's not really clear what it
does but at the top of the page, it says:

NTT any modulus. Inputs A, B, and modulus is then placed inside solve, it can output! ! !

...so it may be worth to investigate. Maybe it NTT-multiplies two integers?


#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 5e5+7, mm[3]={7*(1<<26)+1,998244353,479*(1<<21)+1}, G=3;
int n,m,L,R[maxn];
int A[maxn],B[maxn];
int k1[maxn],k2[maxn],ans[5][maxn];
int mod;

ll qpow(ll a,ll b,int mod)
{
    ll ans = 1;
    while(b>0)
    {
    	if(b&1) ans = ans*a%mod;
    	b>>=1;
    	a = a*a%mod;
	}
	return ans%mod;
}

ll ksc(ll x,ll y,ll p) 
{
	return (x*y-(ll)((long double)x/p*y+1e-8)*p+p)%p;
}

void NTT(int *a,int mod,int f)
{
    for(int i = 0; i < n; i++) 
	{
		if(i < R[i]) swap(a[i],a[R[i]]);
	}
    for(int i = 1; i < n; i <<= 1)
	{
        ll gn = qpow(G,(mod - 1) / (i << 1),mod);
        for(int j = 0; j < n; j += (i << 1))
		{
            ll g = 1;
            for(int k = 0; k < i; k++, g = g * gn % mod)
			{
                int x = a[j + k], y = g * a[j + k + i] % mod;
                a[j + k] = (x + y) % mod; 
				a[j + k + i] = (x - y + mod) % mod;
            }
        }
    }
    if(f==1) return;
    int inv = qpow(n,mod - 2,mod); 
	reverse(a + 1,a + n);
    for(int i = 0; i < n; i++) a[i] = 1ll * a[i] * inv % mod;
}

void work(int x)
{
	for(int i=0;i<n;i++) k1[i] = A[i], k2[i] = B[i];
	NTT(k1,mm[x],1);
	NTT(k2,mm[x],1);
	for(int i=0;i<n;i++) ans[x][i] = 1LL*k1[i]*k2[i]%mm[x];
	NTT(ans[x],mm[x],-1);
}

void solve(int *A,int *B)
{
	m = n + m;
	for(n = 1; n <= m; n <<= 1) L++;
    for(int i = 0; i < n; i++) R[i] = (R[i >> 1] >> 1) | ((i & 1) << (L - 1));
	for(int i=0;i<3;i++) work(i);
	ll M = 1LL*mm[0]*mm[1];
	ll kl1=ksc(mm[1],qpow(mm[1]%mm[0],mm[0]-2,mm[0]),M);
    ll kl2=ksc(mm[0],qpow(mm[0]%mm[1],mm[1]-2,mm[1]),M);
    for(int i=0;i<=m;i++) 
	{
        int t0 = qpow(ans[0][i],mm[1]-2,mm[1]), t1=qpow(ans[1][i],mm[0]-2,mm[0]);
        ll a = (ksc(kl1,ans[0][i],M)+ksc(kl2,ans[1][i],M))%M;
        ll k = ((ans[2][i]-a)%mm[2]+mm[2])%mm[2]*qpow(M%mm[2],mm[2]-2,mm[2])%mm[2];
        printf("%lld ",((M%mod)*(k%mod)%mod+a%mod)%mod);
    }
}

int main()
{
    scanf("%d%d%d",&n,&m,&mod);
    for(int i = 0; i <= n; i++) scanf("%d",A+i);
    for(int i = 0; i <= m; i++) scanf("%d",B+i);
    solve(A,B);
    return 0;
}











