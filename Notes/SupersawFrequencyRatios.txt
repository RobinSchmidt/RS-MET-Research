Let's assume, the frequency ratios are given as rational numbers. We want an algorithm that takes 
as input two frequencies (or period lengths) a,b (both rationla numbers) and produces as output
an array of rational numbers c1,...,cN with c1=a, cN=b which should somehow minimize the beating
between all the different frequencies. ...or actually: sort of distribute the beating in a way that
makes it perceptually least obvious. 

Let ci = ni/di and let's assume that the ci are period lengths. If all denominators di would be 
one, we would like to maximize the lcm of all the ci (i think, if they are frequencies, we want 
to minimze the gcd?). If we allow for other denominators, we perhaps want to maximize 
lcm(n1,..,nN) / lcm(d1,..,dN)? But we need to put some constraints on the size of the numbers - 
otherwise, this maximization task would be unbounded. Maybe let's say that the maximum allowed 
denominator is dMax = d1*dN*N

We also want the average of the ci to be close (or even equal) to (a+b)/2.

Example: N=3, a = c1 = 6/5 = 1.2, b = cN = c3 = 5/4 = 1.25
dMax = d1*d3*N = 5*4*3 = 60, avg = (6/5 + 5/4)/2 = 49/40
let's use c2 = avg = 49/40, them we have:
k := lcm(6,5,49)/lcm(5,4,40) = 1470/40 = 147/4
we wnat the lcm of the numerators to be large, the lcm of the denominators be small and the
gcd of both lcms be small


OR:


Let's not restrict ourselves to rational numbers and let c1,..,cN be real numbers. Maybe choose
equidistant values between a^k and b^k and then take the k-th root afterwards. k is a user 
parameter (could even be 0 or negative - in case of 0, we choose exponential spacing). Or maybe 
choose numbers in a way so as to make their generalized mean (with exponent k) equal the same
generalized mean of a and b...could that give the same result?

Example: N=7, a=10, b=20, k=2
raise a,b to power of k:  a^2 = 100, b^2 = 400
create equidistant numbers: c1 = 100, c2=150, c3=200, c4=250, c5=300, c6=350, c7=400
raise to power 1/k: c1 = 10, c2 = 12.25, c3 = 14.14, c4 = 15.81, c5 = 17.32, c6 = 18.71, c7 = 20

...maybe compute the quadratic mean of these numbers and compare it to the quadratic mean of a,b.
Is it the same? maybe that number k could be some sort of function of i (the index of the ci). 
maybe some sort of point symmetric function around the center? maybe if the mean does not come 
output as desired, we can scale all values - but then we would also have c1 != a, cN != b. Can a
formula be derived that solves this? maybe call this rule equidistantPowers


There are actually (at least) two factors at play that determine the phasiness:
(1) how likely it is for the fundamentals to interfere totally destructively
(2) how likely it is that - when (1) happens - it happens at the same time for
    higher harmonic, too
If it happens that the fundamentals cancels each other totally, we may want the 2nd harmonic to
interfere more constructively to "make up" for it.



Continuous density D:
Example: D = 8.3
-compute freqs for D=8 and D=9
-actual lower half of freqs 0..3 and upper half of freqs 5..8 are computed by blending between
 D=8 and D=9 freqs with factors 0.7 and 0.3
-a middle tone is faded in (with relative amplitude 0.3)
-when floor(D) is even, as in the example above, there's only one obvious way to do it. But when 
 it's odd, we must make a decision if we want to make the split at floor(D)/2 or at floor(D+1)/2.
 If floor(D) is even, they are both the same

----------------------------------------------------------------------------------------------------
On page 12 here:

https://www.kvraudio.com/forum/viewtopic.php?p=8572188#p8572188

stepvhen has posted a solution for what the JP-8000 might have done, including this JSFX code:

/* Reaper JSFX code */
@init
  ph1=0;
  ph2=0;
  padj=2^32;
  
function yass(p,dph,phsr)(
/* Don't have a solution for random phase, but didn't want to implement an RNG.
 * phase offests are the super low base phase, multiplied by some odd factor. This avoids bumping,
  * but does not produce any perceivable repetition or audible frequency shift. The static offset is
  * needed to avoid everything starting at the same spot. 
  */
  x = dph*4; o = 0;
  w1 = (phsr*1.05+0.1) + p + ((dph + x)/256);  
  w2 = (phsr*1.07+0.3) + p - ((dph + x)/256);
  w3 = (phsr*1.13+0.37) + p + x/64;
  w4 = (phsr*1.23+0.29) + p - x/64;
  w5 = (phsr*1.17+0.23) + p + ((x * 8) - x)/256; 
  w6 = (phsr*1.19+0.5) + p - ((x * 8) - x)/256;
  w1 -= floor(w1); w2 -= floor(w2); w3 -= floor(w3);
  w4 -= floor(w4); w5 -= floor(w5); w6 -= floor(w6);
  p -= floor(p);
  o += w1/8 + w2/8 + w3/8 + w4/8 + w5/8 + w6/8+p/16; 	/* fundamental is lower at full wet */
);

@slider
/* detune amount, currently linear */ 
  p1 = slider5;

/* Mix amount, constant loudness */
  dry = cos(0.5*$pi*slider6)/8;
  wet = sin(0.5*$pi*slider6);
 
@sample
ph1+=(adj/padj);  		/* increment base phase, use multiples of this value */
ph1-=floor(ph1);		/* floating point wraparound */
pout=0;
ph2=ph1*padj;			/* Shift back to fundamental frequency */
det = p1*ph2;			/* apply detune */
pout = yass(ph2,det,ph1); 	/* Yet another supersaw */
pout = pout*2 - 1; 		/* Center */

